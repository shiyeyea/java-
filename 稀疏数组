public static void main(String[] args) {
        //创建一个二维数组11*11  0：没有棋子  1：黑棋  2：白棋
        int[][] add=new int[11][11];
        add[1][2]=1;
        add[2][3]=2;
        //输出原始的数组
        System.out.println("输出原始数组");
        for (int[] ints : add) {
            for (int anInt : ints) {
                System.out.print(anInt+"\t");//打印棋盘
            }
            System.out.println();
        }
        //转换为稀疏数组
        //获取有效值个数
        int sum=0;
        for (int i = 0; i < 11; i++) {
            for (int i1 = 0; i1 < 11; i1++) {
                if(add[i][i1]!=0){
                    sum++;
                }
            }
        }
        System.out.println("有效值个数"+sum);
        //创建一个稀疏数组
        int[][] add2=new int[sum+1][3];
        add2[0][0]=11;
        add2[0][1]=11;
        add2[0][2]=sum;
        //遍历二维数组，将非零的值，存放稀疏数组中
        int cout=0;
        for (int i = 0; i < add.length; i++) {
            for (int j = 0; j < add[i].length; j++) {
                if(add[i][j]!=0) {
                    cout++;
                    add2[cout][0] = i;
                    add2[cout][1] = j;
                    add2[cout][2] = add[i][j];
                }
            }
        }
        //输出稀疏数组
        System.out.println("稀疏数组");
        for (int i = 0; i < add2.length; i++) {
            System.out.println(add2[i][0]+"\t"
                    +add2[i][1]+"\t"
                    +add2[i][2]+"\t");
        }
        System.out.println("==================");
        System.out.println("还原");
        //读取稀疏数组
        int[][] add3=new int[add2[0][0]][add2[0][1]];
        //给其中的元素还原它的值
        for (int i = 1; i < add2.length; i++) {
            add3[add2[i][0]][add2[i][1]] = add2[i][2];
        }
        //打印
        System.out.println("输出还原数组");
        for (int[] ints : add) {
            for (int anInt : ints) {
                System.out.print(anInt+"\t");//打印棋盘
            }
            System.out.println();
        }
    }
